# main sconscript
print '..Building src/'

import os

# import build environment
Import('env')
# make a copy
env = env.Clone()

# add current directory as the include path
env.Append(CPPPATH=['.'])

# current path relative to top-level SConscript, i.e. myself
current_path = '.'

# define source & target classes
class SourceFile:
    all = []
    def __init__(self, *srcs):
        self.srcs = []
        for src in srcs:
            self.srcs.append(os.path.join(current_path, src))
        SourceFile.all.append(self)

class BuildTarget:
    all = []
    def __init__(self, target_type, target_name, *srcs):
        self.target = '../bin/%s/%s' % (target_type, target_name)
        self.srcs = []
        for src in srcs:
            self.srcs.append(os.path.join(current_path, src))
        UnitTest.all.append(self)

class UnitTest(BuildTarget):
    def __init__(self, target, *srcs):
        BuildTarget.__init__(self, 'unittest', target, *srcs)

Export('SourceFile')
Export('UnitTest')

# iterate over lower level sconscript files
for root,dirs,files in os.walk(os.getcwd()):
    for dirname in dirs:
        current_path = dirname
        env.SConscript('%s/SConscript' % (dirname))

# add common sources
common_srcs = []
for source_file in SourceFile.all:
    print '..Adding %s' % (source_file.srcs)
    common_srcs.append(source_file.srcs)

# build targets
for build_target in BuildTarget.all:
    print '..Building %s' % (build_target.target)
    srcs = list(common_srcs)
    srcs.append(build_target.srcs)
    env.Program(target=build_target.target, source=srcs)

